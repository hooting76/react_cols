
JAVA 학습 

┌────────────────────────────┐
│       Java 소스코드         │      
│                            │       
│   List<String> list =      │
│       new ArrayList<>();   │
└────────────┬───────────────┘
             │-------------------(.java 전달)  - "변수 선언뿐만 아닌", "제네릭 타입이 사용된 모든 위치의 타입" 일치 여부를 확인
             │
             │                                 EX)  List<String> list = new ArrayList<>();
             │                                      list.add("apple");
             │                                      list.add(123); // ❌ 컴파일 에러 발생
             │
             ▼
┌────────────────────────────┐
│      컴파일 (javac)        │                  
│                            │
│ ✔ 제네릭 타입 체크          │
│ ✔ 타입 안정성 확인          │
│ ✔ 경고 발생 여부 판단       │
│                            │
│ ✘ 실제 타입 정보 저장 안함  │
└────────────┬───────────────┘
             │-------------------(.class로 바이트코드 파일로 변환) 
             ▼
┌────────────────────────────┐
│   바이트코드 (.class 파일)  │      1) .class 파일 내에서 모든 실행 정보(class, method, field)가 포함됨. // 단, 타입 정보는 없다.
│                            │      2) 자바의 "제네릭"은 "타입 소거(Type Erasure)" 기반으로 설계
│ List는 실제로               │         - 제네릭 타입 매개변수 (<T>)는 컴파일 후 제거됨
│ ArrayList로 컴파일됨        │         - 대신 Object로 바뀌거나 **제한된 상위 타입 (예: T extends Number)** 으로 대체됨
│                            │      3) 이렇게 처리한 이유로, java5 버전 도입 당시 JVM을 바꾸지 않고도 제네릭을 도입을 할려고 .class 방식을 유지
│ ⚠ String 타입 정보 없음     │         - 하위(버전) 호환성 유지를 위함.
└────────────┬───────────────┘
┌────────────────────────────┐        
│  -컴파일 전 java 소스코드-  │
│                            │
│   public class Box<T> {    │
│       T value;             │
│                            │
│       void set(T val) {    │
│           this.value = val;│ 
│       }                    │
│                            │
│       T get() {            │
│           return value;    │
│       }                    │
│   }                        │
└────────────┬───────────────┘
┌────────────────────────────┐
│  -컴파일 후 소거된 코드-     │
│         (개념적)            │
│public class Box {          │
    Object value;            │
                             │
    void set(Object val) {   │
        this.value = val;    │
    }                        │
                             │
    Object get() {           │
        return value;        │
    }                        │
│}                           │
└────────────┬───────────────┘
             ▼
┌────────────────────────────┐
│       JVM (런타임)          │      1) JVM 에는 "제네릭 타입 정보를 표현하는 구조"가 없음 // JVM 사양 자체가 제네릭 타입을 알 수 없도록 설계됨
│                            │          - List<String>이나 List<Integer>는 JVM에서 동일한 List로만 인식됨
│ - 제네릭 타입 정보 없음      │      2) 타입 정보는 컴파일러 내부의 검사 도구일 뿐, 런타임 시스템에는 전달되지 않음
│ - 타입 소거(Type Erasure)   │      3) 모든 제네릭은 Object 로 처리
│ - List<String>,            |
|    List<Integer>는 동일     |
│                            │
│ 예: list.getClass()는 같음  │
└────────────────────────────┘

그렇다면, 제네릭은 왜 중요한가. // 클래스를 인자화 하는 행위
 1. 컴파일 할때 잘못된 타입 사용 방지
 2. 제네릭을 사용하면 형변환 생략 가능 => 안전한 타입 처리 가능하다.
    - Object 타입으로 형변환 필요 x
 3. 코드 재사용성
    - 2번의 특징을 더 살릴 수 있어서, 같은 로직을 다양한 타입에 적용 가능
 4. IDE 지원 향상
    - 타입 추론으로 "코드 자동 완성" 및 "디버깅" 용이